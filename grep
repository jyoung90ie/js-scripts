HTTP/2 200 
cache-control: max-age=300
content-security-policy: default-src 'none'; style-src 'unsafe-inline'; sandbox
content-type: text/plain; charset=utf-8
etag: "9aaa18f762c620ae79a6f4516b245e40a331d25edc5ca2e40bb61de90e2e16ce"
strict-transport-security: max-age=31536000
x-content-type-options: nosniff
x-frame-options: deny
x-xss-protection: 1; mode=block
x-github-request-id: 673E:2873E8:78111:F9021:680FEFA7
accept-ranges: bytes
date: Mon, 28 Apr 2025 21:17:59 GMT
via: 1.1 varnish
x-served-by: cache-lon420143-LON
x-cache: HIT
x-cache-hits: 1
x-timer: S1745875080.670962,VS0,VE1
vary: Authorization,Accept-Encoding,Origin
access-control-allow-origin: *
cross-origin-resource-policy: cross-origin
x-fastly-request-id: 09b3291781d21692565c064b4d2057e262addebc
expires: Mon, 28 Apr 2025 21:22:59 GMT
source-age: 224
content-length: 1333

class VideoAutoPlayBehavior {
  static id = "VideoAutoPlayBehavior";

  // Required static method: should return true if behavior should run
  static isMatch(url, document) {
    return true; // Always run (you can later filter if needed)
  }

  // Required static method: called at behavior startup
  static init() {
    // No special setup needed, but method must exist
    return {};
  }

  async* run(ctx) {
    yield ctx.log("✅ Custom VideoAutoPlayBehavior script started!");

    // Wait for Wistia iframe to appear
    yield ctx.log("⏳ Waiting for Wistia iframe...");
    await ctx.waitForElement('iframe[src*="wistia"]');

    yield ctx.log("✅ Wistia iframe found, attempting to play video...");

    const iframe = document.querySelector('iframe[src*="wistia"]');
    if (iframe && iframe.contentWindow) {
      iframe.contentWindow.postMessage(
        JSON.stringify({ method: "play" }),
        "*"
      );
      yield ctx.log("▶️ Play command sent to Wistia player.");
    } else {
      yield ctx.log("⚠️ Wistia iframe not accessible.");
    }

    // Optionally wait a few seconds to let buffering start
    yield ctx.sleep(5000);

    yield ctx.log("⏳ Waiting for network to become idle...");
    await ctx.waitForNetworkIdle(5000);

    yield ctx.log("✅ Network idle detected, moving on.");
  }
}
